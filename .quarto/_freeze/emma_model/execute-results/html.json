{
  "hash": "12ecb9dc95e9f5a4cf5ecb251534ee11",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"EMMA Model Overview\"\n---\n\n\n::: {.cell}\n\n:::\n\n\nThe details are given in [@slingsby_near-real_2020;@wilson_climatic_2015], but in short what we do is estimate the age of a site by calculating the years since the last fire. We then fit a curve to model the recovery of vegetation (measured using NDVI) as a function of it's age. For this we use a negative exponential curve with the following form:\n\n$$\\mu_{i,t}=\\alpha_i+\\gamma_i\\Big(1-e^{-\\frac{age_{i,t}}{\\lambda_i}}\\Big)$$\n\nwhere $\\mu_{i,t}$ is the expected NDVI for site $i$ at time $t$\n\nThe observed greenness $NDVI_{i,t}$  is assumed to follow a normal distribution with mean $\\mu_{i,t}$\n$$NDVI_{i,t}\\sim\\mathcal{N}(\\mu_{i,t},\\sigma_)$$\n\nAn additional level models the parameters of the negative exponential curve as a function of environmental variables. This means that sites with similar environmental conditions should have similar recovery curves. The full model also includes a sinusoidal term to capture seasonal variation, but lets keep it simple here.  \n\n## ADVI\n\nWe have `age` in years, a plot identifier `pid`. the observed ndvi `nd` and two plot level environmental variable `env1`, which is mean annual precipitation, and `env2`, which is the summer maximum temperature.  \n\nLets load up our Stan model which codes the model described above. This is not a particularly clever or efficient way of coding the model, but it is nice and readable and works fine on this example dataset  \n\n\nHow long did that take?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_fit$time()$total\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparams=c(\"tau\",\"alpha_mu\",\"gamma_b2\",\"gamma_b1\",\"lambda_b1\",\"lambda_b2\")\nposteriors=model_fit$draws(params) %>% \n  as_tibble() %>% \n  gather(parameter)\nggplot(posteriors,aes(x=value))+\n  geom_density(fill=\"grey\")+\n  facet_wrap(~parameter,scales = \"free\")\n```\n:::\n\n\n\n## Plot\n\nWhen we make this comparison, the posterior predictive intervals from ADVI and MCMC are almost identical\n\n\n::: {.cell}\n\n```{.r .cell-code}\nposterior_summary %>% \n    filter(pid %in% as.numeric(sample(levels(as.factor(posterior_summary$pid)),20))) %>% # just show a few\n  ggplot(aes(x=age)) +\n  geom_line(aes(y=mean),colour=\"blue\") +\n  geom_line(aes(y=nd),colour=\"black\",lwd=0.5,alpha=0.3) +\n  geom_ribbon(aes(ymin=q5,ymax=q95),alpha=0.5)+\n  facet_wrap(~pid) +\n  xlim(c(0,20))+\n  labs(x=\"time since fire (years)\",y=\"NDVI\") +\n  theme_bw()\n```\n:::\n\n\n# Spatial Predictions\nThis section is not yet working - need to get the coordinates in the original data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstan_spatial <- stan_vb %>% \n  mutate(pid=gsub(\"[]]\",\"\",gsub(\".*[[]\",\"\",variable))) %>% \n  bind_cols(select(data,x,y,age,nd))\n\nforeach(t=unique(raw_data$DA),.combine=stack) %do% {\nstan_spatial %>% \n    filter(DA=t) %>%\n    select(x,y,age,nd,mean,q5) %>% \n    rasterFromXYZ()\n}\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}