---
title: "EMMA Report"
---

Page last updated at `r lubridate::now()`.

```{r, echo=F, message=F,include=F, results="hide", eval=T}
#description: Modeling vegetation postfire recovery data


# load data saved in the pipeline
#tar_load(c(envdata, stan_data, model_results, spatial_outputs,model_prediction)) 
library(targets)
library(tidyverse)
library(sf)
library(terra)
library(leaflet)
# need to include all necessary targets here otherwise they aren't dependencies with tar_quarto()
tar_load(protected_areas)
tar_load(park_fire_history)
tar_load(temp_directory)
tar_load(years_since_fire_raster)
tar_load(fires_wgs)
tar_load(most_recent_ndvi_raster)
tar_load(most_recent_ndvi_date)
tar_load(monthly_mean_ndvi_raster)
tar_load(monthly_delta_ndvi_raster)
tar_load(weather_data)
tar_load(report_qmd_dir) # forces park qmds to run first
  
```

# Model Overview

We estimate the age of a site by calculating the years since the last fire. We then fit a curve to model the recovery of vegetation (measured using NDVI) as a function of it's age. An additional level models the parameters of the negative exponential curve as a function of environmental variables. This means that sites with similar environmental conditions should have similar recovery curves. More details are available <a href=model_summary.html>here.</a>

# Park Information


```{r, echo=F}
#update to use the new quarto docs

  base_url <- "https://adamwilsonlab.github.io/emma_report/reports/"
  base_url <- "reports/" #keep relative paths?
  
    reports <- 
  data.frame(report = list.files("reports/")) %>%
    mutate(url = paste(base_url,gsub(pattern = ".qmd",replacement = ".html",x = report),sep = ""),
           park_name = gsub(pattern = "report.",replacement = "",x = report),
           park_name = gsub(pattern = ".html",replacement = "",x = park_name),
           park_name = gsub(pattern = ".qmd",replacement = "",x = park_name),
           park_name = gsub(pattern = "_",replacement = " ",x = park_name)) %>%
      mutate(
          park = glue::glue("[{park_name}]({url})"),
          park = map(park, gt::md))
  
  protected_areas <-
  protected_areas %>%
    st_as_sf() |> 
    inner_join(y = reports,
               by = c("name"="park_name"))%>% 
    st_transform(crs = st_crs(4326))%>% 
   mutate(tag = paste0("Park: <a href=", url,">",name , "</a>"))

  bbox <- st_bbox(protected_areas) %>%
  as.vector()


```

```{r park_map, fig.width = 10, fig.height = 7, echo = FALSE, warning = FALSE, message = FALSE}


  leaflet(data = protected_areas) %>%
    addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
    addProviderTiles("Esri.NatGeoWorldMap", group = "NatGeo") %>%
    #addProviderTiles("NASAGIBS.ModisTerraTrueColorCR", group = "True Colors") %>%
  addPolygons(color = "black",
              stroke = TRUE,
              fill = TRUE,
              group = "Park",
              popup = ~tag) %>%
  addLayersControl(
    baseGroups = c("NatGeo","World Imagery"),
    options = layersControlOptions(collapsed = FALSE),position = "topright") %>%
  fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])

```
